CAMPUS COQUIMATLÁN 

FACULTAD DE INGENIERÍA MECÁNICA Y ELÉCTRICA 
CARRERA DE ING. EN COMPUTACIÓN INTELIGENTE I.C.I. 

  6-B CICLO FEBRERO 2024 - JULIO 2024 

PLN | PROCESAMIENTO DE LENGUAJE NATURAL 

PROFESOR: Dte. CARRILLO ZEPEDA OSWALDO. 

ALUMNO: Antonio Fdo. Fernández Cruz. 

22 / Marzo / 2024 

Elaboración de reactivos de NLTK 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Investigación N° 1 

listado de algunas de las funciones y comandos de NLTK para trabajar con archivos de texto 
(*.txt): 

1.  Tokenización: 

•  word_tokenize(texto): Divide un texto en palabras individuales. 

•  sent_tokenize(texto): Divide un texto en oraciones. 

2.  Stopwords: 

•  stopwords.words('idioma'): Devuelve una lista de palabras comunes que 
generalmente se consideran irrelevantes en el procesamiento del lenguaje 
natural. 

3.  Stemming y Lemmatización: 

•  PorterStemmer().stem(palabra): Realiza la reducción de palabras a su raíz 

utilizando el algoritmo de Porter. 

•  WordNetLemmatizer().lemmatize(palabra): Reduce las palabras a su forma 

base (lemma) utilizando WordNet. 

4.  Frecuencia de palabras: 

•  FreqDist(tokens): Calcula la frecuencia de cada palabra en una lista de 

tokens. 

5.  Concordancia y Contexto: 

•  Text(tokens).concordance(palabra): Muestra apariciones de una palabra en 

contexto. 

•  Text(tokens).similar(palabra): Muestra palabras que aparecen en contextos 

similares. 

 
 
 
 
 
 
 
 
 
 
 
6.  Colocaciones: 

•  Text(tokens).collocations(): Encuentra colocaciones, es decir, palabras que 

aparecen juntas con frecuencia. 

7.  Análisis de Sentimientos: 

•  SentimentIntensityAnalyzer().polarity_scores(texto): Analiza el sentimiento 

de un texto y devuelve una puntuación de positividad, negatividad y 
neutralidad. 

8.  Clasificación de Texto: 

•  Métodos para entrenar y evaluar modelos de clasificación de texto. 

9.  Part of Speech Tagging: 

•  pos_tag(tokens): Etiqueta las palabras con su categoría gramatical (parte del 

discurso). 

10. Chunking: 

•  Permite identificar frases sustantivas, verbales, etc., en un texto. 

11. Parseo de Gramática: 

•  Permite definir y parsear gramáticas. 

Estas son solo algunas de las funciones y comandos disponibles en NLTK para trabajar 
con archivos de texto (*.txt). Cada una tiene su propia utilidad y puede combinarse con otras 
para realizar tareas más complejas de procesamiento de lenguaje natural. 

 
 
 
 
 
 
 
 
Investigación N° 2 

NLTK (Natural Language Toolkit) es una biblioteca de Python muy útil para el procesamiento 
de lenguaje natural (NLP, por sus siglas en inglés). Puede manejar varios tipos de archivos de 
texto, como archivos .txt, documentos PDF, archivos HTML, etc. Aquí te proporciono una visión 
general  de  algunas  de  las  funciones  y  comandos  más  comunes  de  NLTK  para  trabajar  con 
archivos de texto .txt: 

1.  Tokenización: 

•  Función: Divide el texto en palabras o frases más pequeñas. 

•  Comando: nltk.word_tokenize(texto) o nltk.sent_tokenize(texto) 

•  Ejemplo: 

pythonCopy code 

import nltk texto = "Este es un ejemplo de tokenización en NLTK. Espero que sea útil." 
palabras = nltk.word_tokenize(texto) print(palabras)  

Salida: 

cssCopy code 

['Este', 'es', 'un', 'ejemplo', 'de', 'tokenización', 'en', 'NLTK', '.', 'Espero', 'que', 'sea', 'útil', '.']  

2.  Eliminar stopwords: 

•  Función: Elimina palabras comunes que no aportan mucho significado al 

texto. 

•  Comando: nltk.corpus.stopwords.words('idioma') 

•  Ejemplo: 

pythonCopy code 

from nltk.corpus import stopwords stop_words = set(stopwords.words('spanish')) 
palabras_limpias = [palabra for palabra in palabras if palabra.lower() not in stop_words] 
print(palabras_limpias)  

Salida: 

cssCopy code 

['ejemplo', 'tokenización', 'NLTK', '.', 'Espero', 'útil', '.']  

 
 
 
 
 
 
3.  Stemming y lematización: 

•  Función: Reduce las palabras a su forma base (stemming) o su forma 

canónica (lematización). 

•  Comando: nltk.stem.PorterStemmer() o nltk.stem.WordNetLemmatizer() 

•  Ejemplo: 

pythonCopy code 

from nltk.stem import PorterStemmer, WordNetLemmatizer stemmer = PorterStemmer() 
lemmatizer = WordNetLemmatizer() stems = [stemmer.stem(palabra) for palabra in 
palabras_limpias] lemas = [lemmatizer.lemmatize(palabra) for palabra in palabras_limpias] 
print(stems) print(lemas)  

Salida: 

cssCopy code 

['ejemplo', 'token', 'nltk', '.', 'espero', 'útil', '.'] ['ejemplo', 'tokenización', 'NLTK', '.', 'Espero', 'útil', '.']  

4.  Análisis de frecuencia: 

•  Función: Calcula la frecuencia de cada palabra en el texto. 

•  Comando: nltk.FreqDist(lista_de_palabras) 

•  Ejemplo: 

pythonCopy code 

from nltk import FreqDist frecuencia = FreqDist(palabras_limpias) 
print(frecuencia.most_common(5))  

Salida: 

cssCopy code 

[('ejemplo', 1), ('tokenización', 1), ('NLTK', 1), ('.', 2), ('Espero', 1)]  

Para  otros  tipos  de  archivos  como  PDF  o  HTML,  NLTK  puede  no  tener  funciones 
específicas.  Sin  embargo,  puedes  usar  otras  bibliotecas  como  pdfminer  para  trabajar  con 
archivos PDF y BeautifulSoup para archivos HTML, y luego usar NLTK para el procesamiento 
de texto una vez que hayas extraído el texto de esos archivos. 

 
 
 
